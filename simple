#!/usr/bin/env php

<?php

require_once __DIR__ . '/vendor/autoload.php';

use SimpleKit\SimpleORM\EntityGenerator;
use SimpleKit\SimpleORM\EntityManager;
use SimpleKit\SimpleORM\EntityType;

$command_args = array_slice($argv, 1);
$command_array = explode(":", $command_args[0]);
$command_interface = $command_array[0];

if ($command_array[0] === "help") {
    $available_interfaces = ["generate", "migrate", "destroy", "rollback"];
    $available_arguments = ["entity", "controller"];
    echo "\nAvailable interfaces: " . implode(', ', $available_interfaces) . "\n";
    echo "Available arguments: " . implode(', ', $available_arguments) . "\n";
    echo "Example command: " . "php simple generate:entity <entity> With entity being the entity name";
    exit();
} else if ($argc > 4 || $argc < 3) {
    exit("insufficiant number of arguments: " . $argc);
}

$class_name = $command_args[1];
$command_argument = $command_array[1];

if ($class_name == "Class") {
    exit("Entity name 'Class' is not allowed");
}

function isFirstCharUppercase(string $str): bool
{
    return ctype_upper(mb_substr($str, 0, 1, 'UTF-8'));
}

if (!isFirstCharUppercase($class_name)) {
    exit('Entity name: ' . $class_name . ' must start with an uppercase');
}

switch ($command_interface) {
    case "destroy":
        switch ($command_argument) {
            case "entity":
                EntityGenerator::destroy($class_name, EntityType::migration);
                break;
            case "controller":
                EntityGenerator::destroy($class_name, EntityType::controller);
                break;
            case "model":
                EntityGenerator::destroy($class_name, EntityType::model);
            break;
            default:
                exit("Command argument not recognized");
        }
        break;
    case "generate":
        switch ($command_argument) {
            case "entity":
                EntityGenerator::generate($class_name, EntityType::migration);
                break;
            case "controller":
                EntityGenerator::generate($class_name, EntityType::controller);
                break;
            case "model":
                EntityGenerator::generate($class_name, EntityType::model);
                break;
            default:
                exit("Command argument not recognized");
        }
        break;
    case "migrate":
        switch ($command_argument) {
            case "entity":
                EntityGenerator::migrate($class_name);
                break;
            default:
                exit("Command argument not recognized");
        }
        break;
    case "rollback":
        switch ($command_argument) {
            case "entity":
                $manager = new EntityManager($class_name);
                $manager->down();
                break;
            default:
                exit("Command argument not recognized");
        }
        break;
    default:
        exit("Command interface not recognized");
}
